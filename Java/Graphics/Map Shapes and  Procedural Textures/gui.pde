/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(GWinApplet appc, GWinData data) { //_CODE_:controlWindow:283047:
  appc.background(230);
} //_CODE_:controlWindow:283047:

public void rotateSwitch_clicked1(GCheckbox source, GEvent event) { //_CODE_:rotateSwitch:222302:
//  println("rotateSwitch - GCheckbox >> GEvent." + event + " @ " + millis());
  if (source.isSelected() == true) {
    setRotate(true);
  }
  else if(source.isSelected() == false) {
    setRotate(false);
  }
} //_CODE_:rotateSwitch:222302:

public void torus_clicked1(GOption source, GEvent event) { //_CODE_:setTorus:810168:
//  println("torus - GOption >> GEvent." + event + " @ " + millis());
  shape = "torus";
} //_CODE_:setTorus:810168:

public void setCube_clicked1(GOption source, GEvent event) { //_CODE_:setCube:639574:
//  println("cube - GOption >> GEvent." + event + " @ " + millis());
  shape = "cube";
} //_CODE_:setCube:639574:

public void noiseReset_click1(GButton source, GEvent event) { //_CODE_:noiseReset:501527:
//  println("noiseReset - GButton >> GEvent." + event + " @ " + millis());
  frameCount *= 0;
  noise = 0;
} //_CODE_:noiseReset:501527:

public void setPlanar_clicked1(GOption source, GEvent event) { //_CODE_:setPlanar:773189:
//  println("setPlanar - GOption >> GEvent." + event + " @ " + millis());
  theShader = planarShader;
} //_CODE_:setPlanar:773189:

public void setSpherical_clicked1(GOption source, GEvent event) { //_CODE_:setSpherical:851171:
//  println("setSpherical - GOption >> GEvent." + event + " @ " + millis());
  theShader = sphericalShader;
} //_CODE_:setSpherical:851171:

public void setCylindrical_clicked1(GOption source, GEvent event) { //_CODE_:setCylindrical:203501:
//  println("setCylindrical - GOption >> GEvent." + event + " @ " + millis());
  theShader = cylindricalShader;
} //_CODE_:setCylindrical:203501:

public void setCubic_clicked1(GOption source, GEvent event) { //_CODE_:setCubic:993646:
//  println("setCubic - GOption >> GEvent." + event + " @ " + millis());
//  theShader = cubicShader;
} //_CODE_:setCubic:993646:

public void cameraMap_clicked1(GOption source, GEvent event) { //_CODE_:cameraMap:789381:
//  println("cameraMap - GOption >> GEvent." + event + " @ " + millis());
  theShader = A3planarShader;
} //_CODE_:cameraMap:789381:

public void startNoise_click1(GButton source, GEvent event) { //_CODE_:startNoise:667809:
//  println("startNoise - GButton >> GEvent." + event + " @ " + millis());
  frameCount *= 0;
  noiseOn = true;
} //_CODE_:startNoise:667809:

public void stopNoise_click1(GButton source, GEvent event) { //_CODE_:stopNoise:324300:
//  println("stopNoise - GButton >> GEvent." + event + " @ " + millis());
  frameCount *= 0;
  noise = 0;
  noiseOn = false;
} //_CODE_:stopNoise:324300:

public void option1_clicked1(GOption source, GEvent event) { //_CODE_:option1:618180:
//  println("option1 - GOption >> GEvent." + event + " @ " + millis());
  noiseVersion = 1;
} //_CODE_:option1:618180:

public void option2_clicked1(GOption source, GEvent event) { //_CODE_:option2:215225:
//  println("option2 - GOption >> GEvent." + event + " @ " + millis());
  noiseVersion = 2;
} //_CODE_:option2:215225:

public void option3_clicked1(GOption source, GEvent event) { //_CODE_:option3:871550:
//  println("option3 - GOption >> GEvent." + event + " @ " + millis());
  noiseVersion = 3;
} //_CODE_:option3:871550:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  if(frame != null)
    frame.setTitle("Sketch Window");
  controlWindow = new GWindow(this, "Control Window", 50, 0, 400, 500, false, JAVA2D);
  controlWindow.setActionOnClose(G4P.EXIT_APP);
  controlWindow.addDrawHandler(this, "win_draw1");
  label2 = new GLabel(controlWindow.papplet, 20, 50, 80, 20);
  label2.setText("Rotate");
  label2.setOpaque(false);
  rotateSwitch = new GCheckbox(controlWindow.papplet, 120, 50, 120, 20);
  rotateSwitch.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  rotateSwitch.setOpaque(false);
  rotateSwitch.addEventHandler(this, "rotateSwitch_clicked1");
  label1 = new GLabel(controlWindow.papplet, 20, 90, 80, 20);
  label1.setText("Shape");
  label1.setOpaque(false);
  togGroup1 = new GToggleGroup();
  setTorus = new GOption(controlWindow.papplet, 120, 90, 120, 20);
  setTorus.setText("Torus");
  setTorus.setOpaque(false);
  setTorus.addEventHandler(this, "torus_clicked1");
  setCube = new GOption(controlWindow.papplet, 244, 90, 120, 20);
  setCube.setText("Cube");
  setCube.setOpaque(false);
  setCube.addEventHandler(this, "setCube_clicked1");
  togGroup1.addControl(setTorus);
  togGroup1.addControl(setCube);
  setCube.setSelected(true);
  label3 = new GLabel(controlWindow.papplet, 20, 240, 80, 20);
  label3.setText("Noise");
  label3.setOpaque(false);
  noiseReset = new GButton(controlWindow.papplet, 290, 240, 80, 20);
  noiseReset.setText("Reset");
  noiseReset.addEventHandler(this, "noiseReset_click1");
  label4 = new GLabel(controlWindow.papplet, 20, 130, 80, 20);
  label4.setText("Map Shape");
  label4.setOpaque(false);
  togGroup2 = new GToggleGroup();
  setPlanar = new GOption(controlWindow.papplet, 120, 130, 120, 20);
  setPlanar.setText("Planar");
  setPlanar.setOpaque(false);
  setPlanar.addEventHandler(this, "setPlanar_clicked1");
  setSpherical = new GOption(controlWindow.papplet, 120, 155, 120, 20);
  setSpherical.setText("Spherical");
  setSpherical.setOpaque(false);
  setSpherical.addEventHandler(this, "setSpherical_clicked1");
  setCylindrical = new GOption(controlWindow.papplet, 120, 180, 120, 20);
  setCylindrical.setText("Cylindrical");
  setCylindrical.setOpaque(false);
  setCylindrical.addEventHandler(this, "setCylindrical_clicked1");
  setCubic = new GOption(controlWindow.papplet, 120, 205, 120, 20);
  setCubic.setText("Cubic");
  setCubic.setOpaque(true);
  setCubic.addEventHandler(this, "setCubic_clicked1");
  cameraMap = new GOption(controlWindow.papplet, 120, 330, 120, 20);
  cameraMap.setText("Camera Map");
  cameraMap.setOpaque(false);
  cameraMap.addEventHandler(this, "cameraMap_clicked1");
  togGroup2.addControl(setPlanar);
  setPlanar.setSelected(true);
  togGroup2.addControl(setSpherical);
  togGroup2.addControl(setCylindrical);
  togGroup2.addControl(setCubic);
  togGroup2.addControl(cameraMap);
  startNoise = new GButton(controlWindow.papplet, 119, 240, 80, 20);
  startNoise.setText("Start");
  startNoise.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  startNoise.addEventHandler(this, "startNoise_click1");
  stopNoise = new GButton(controlWindow.papplet, 205, 240, 80, 20);
  stopNoise.setText("Stop");
  stopNoise.setLocalColorScheme(GCScheme.RED_SCHEME);
  stopNoise.addEventHandler(this, "stopNoise_click1");
  label5 = new GLabel(controlWindow.papplet, 20, 330, 80, 20);
  label5.setText("Part A - 3");
  label5.setOpaque(false);
  togGroup3 = new GToggleGroup();
  option1 = new GOption(controlWindow.papplet, 118, 275, 60, 20);
  option1.setText("One");
  option1.setOpaque(false);
  option1.addEventHandler(this, "option1_clicked1");
  option2 = new GOption(controlWindow.papplet, 185, 275, 60, 20);
  option2.setText("Two");
  option2.setOpaque(false);
  option2.addEventHandler(this, "option2_clicked1");
  option3 = new GOption(controlWindow.papplet, 251, 275, 60, 20);
  option3.setText("Three");
  option3.setOpaque(false);
  option3.addEventHandler(this, "option3_clicked1");
  togGroup3.addControl(option1);
  option1.setSelected(true);
  togGroup3.addControl(option2);
  togGroup3.addControl(option3);
}

// Variable declarations 
// autogenerated do not edit
GWindow controlWindow;
GLabel label2; 
GCheckbox rotateSwitch; 
GLabel label1; 
GToggleGroup togGroup1; 
GOption setTorus; 
GOption setCube; 
GLabel label3; 
GButton noiseReset; 
GLabel label4; 
GToggleGroup togGroup2; 
GOption setPlanar; 
GOption setSpherical; 
GOption setCylindrical; 
GOption setCubic; 
GOption cameraMap; 
GButton startNoise; 
GButton stopNoise; 
GLabel label5; 
GToggleGroup togGroup3; 
GOption option1; 
GOption option2; 
GOption option3; 

